// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineQueuing.Data;

namespace OnlineQueuing.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20190523233434_FinalDatabase")]
    partial class FinalDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("OnlineQueuing.Entities.Appointment", b =>
                {
                    b.Property<long>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppointmentTimeSlot");

                    b.Property<long?>("DateId");

                    b.Property<long?>("ServiceTypeId");

                    b.Property<int>("TimeSlot");

                    b.Property<long?>("UserId");

                    b.HasKey("AppointmentId");

                    b.HasIndex("DateId");

                    b.HasIndex("ServiceTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("OnlineQueuing.Entities.Business", b =>
                {
                    b.Property<long>("BusinessId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adress");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.HasKey("BusinessId");

                    b.ToTable("Businesses");
                });

            modelBuilder.Entity("OnlineQueuing.Entities.Date", b =>
                {
                    b.Property<long>("DateId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime");

                    b.HasKey("DateId");

                    b.ToTable("Dates");
                });

            modelBuilder.Entity("OnlineQueuing.Entities.ServiceDate", b =>
                {
                    b.Property<long>("DataId");

                    b.Property<long>("ServiceTypeId");

                    b.Property<long?>("DateId");

                    b.Property<long?>("ServiceTypeDataId");

                    b.Property<long?>("ServiceTypeId1");

                    b.HasKey("DataId", "ServiceTypeId");

                    b.HasIndex("DateId");

                    b.HasIndex("ServiceTypeId");

                    b.HasIndex("ServiceTypeDataId", "ServiceTypeId1");

                    b.ToTable("ServiceDates");
                });

            modelBuilder.Entity("OnlineQueuing.Entities.ServiceType", b =>
                {
                    b.Property<long>("ServiceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("BusinessId");

                    b.Property<int>("MaxAppointmentsPerDay");

                    b.Property<string>("Type");

                    b.HasKey("ServiceTypeId");

                    b.HasIndex("BusinessId");

                    b.ToTable("ServiceTypes");
                });

            modelBuilder.Entity("OnlineQueuing.Entities.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Role");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("OnlineQueuing.Entities.Appointment", b =>
                {
                    b.HasOne("OnlineQueuing.Entities.Date", "Date")
                        .WithMany("Appointments")
                        .HasForeignKey("DateId");

                    b.HasOne("OnlineQueuing.Entities.ServiceType", "ServiceType")
                        .WithMany("Appointments")
                        .HasForeignKey("ServiceTypeId");

                    b.HasOne("OnlineQueuing.Entities.User")
                        .WithMany("Apointments")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OnlineQueuing.Entities.ServiceDate", b =>
                {
                    b.HasOne("OnlineQueuing.Entities.Date", "Date")
                        .WithMany("ServiceDates")
                        .HasForeignKey("DateId");

                    b.HasOne("OnlineQueuing.Entities.ServiceType")
                        .WithMany("ServiceDates")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OnlineQueuing.Entities.ServiceDate", "ServiceType")
                        .WithMany()
                        .HasForeignKey("ServiceTypeDataId", "ServiceTypeId1");
                });

            modelBuilder.Entity("OnlineQueuing.Entities.ServiceType", b =>
                {
                    b.HasOne("OnlineQueuing.Entities.Business", "Business")
                        .WithMany("ServiceTypes")
                        .HasForeignKey("BusinessId");
                });
#pragma warning restore 612, 618
        }
    }
}
